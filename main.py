

import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
from flask import Flask
from threading import Thread

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

@app.route("/ping")
def ping():
    return "OK", 200

def run_flask():
    app.run(host="0.0.0.0", port=8080)

Thread(target=run_flask).start()

# ü§ñ Telegram
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class QuizState(StatesGroup):
    question_index = State()
    selected_options = State()
    temp_selected = State()
    current_message_id = State()

#
questions = [
    {
        "text": "1) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ KeyPad?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/1.jpg",
        "options": [
            ("–•–æ–ª–¥–µ—Ä '-'", True),
            ("–•–æ–ª–¥–µ—Ä '+'", True),
            ("–†–µ–∑–∏—Å—Ç–æ—Ä", False),
            ("–°–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥", False)
        ]
    },
    {
        "text": "2) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ StreetSiren?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/2.jpg",
        "options": [
            ("–ê–Ω—Ç–µ–Ω–∞", True),
            ("–ö–Ω–æ–ø–∫–∞", True),
            ("–°–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥", False),
            ("–ö–≤–∞—Ä—Ü–æ–≤–∏–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä", True)
        ]
    },
    {
        "text": "3) –Ø–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–ª–æ–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É –Ω–∞ –ø–ª–∞—Ç—ñ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º DoorProtect?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/3.jpg",
        "options": [
            ("2", True),
            ("1", False),
            ("–ë—É–¥—å-—è–∫–µ", False),
            ("QR –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω", False)
        ]
    },
    {
        "text": "4) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É WaterStop MBR?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/4.jpg",
        "options": [
            ("1", False),
            ("2", True),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ú–æ–∂–Ω–∞ –æ–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏", False)
        ]
    },
    {
        "text": "5) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É Hub Hybrid?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/5.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False)
        ]
    },
    {
        "text": "6) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É LifeQuality?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/6.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("3", False),
            ("4", False)
        ]
    },
    {
        "text": "7) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É Hub?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/7.jpg",
        "options": [
            ("1", True),
            ("2", True),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ñ–æ–¥–µ–Ω", False)
        ]
    },
    {
        "text": "8) –ß–∏ –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è —Ç–∞–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∞–∫—Ä–∏—Ç—Ç—è –∑–∞—Ö–∏—Å–Ω–æ–≥–æ –∫–æ–≤–ø–∞—á–∫–∞ –Ω–∞ –ø–ª–∞—Ç—ñ Multitransmitter?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/8.jpg",
        "options": [
            ("–¢–∞–∫", True),
            ("–ù—ñ", False),
            ("–ú–æ–∂–ª–∏–≤–æ", False),
            ("–¢—ñ–ª—å–∫–∏ –∑–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é", False)
        ]
    },
    {
        "text": "9) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É LightSwitch PWR?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/9.jpg",
        "options": [
            ("1", False),
            ("2", True),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ñ–æ–¥–µ–Ω", False)
        ]
    },
    {
        "text": "10) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É KPC.BOT?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/10.jpg",
        "options": [
            ("1", False),
            ("2", True),
            ("3", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    }
]

questions += [
    {
        "text": "11) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É uartBridge?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/11.jpg",
        "options": [
            ("1", False),
            ("2", True),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ñ–æ–¥–µ–Ω", False)
        ]
    },
    {
        "text": "12) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É MotionProtect Outdoor?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/12.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("3", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    },
    {
        "text": "13) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ MotionCam?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/13.jpg",
        "options": [
            ("–ï–ª–µ–∫—Ç—Ä–æ–ª—ñ—Ç–∏—á–Ω—ñ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–∏", True),
            ("–§–æ—Ç–æ—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", True),
            ("–ê–Ω—Ç–µ–Ω–∞", False),
            ("–°–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥", False)
        ]
    },
    {
        "text": "14) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É ReX?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/14.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("3", False),
            ("4", False)
        ]
    },
    {
        "text": "15) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ Hub Hybrid 4G?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/15.jpg",
        "options": [
            ("–†–æ–∑ º—î–º SIM —Ö–æ–ª–¥–µ—Ä–∞", True),
            ("–ö–ª–µ–º–∞ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–æ—ó –±–∞—Ç–∞—Ä–µ—ó", True),
            ("–¢–∞–º–ø–µ—Ä", False),
            ("–ö–≤–∞—Ä—Ü–æ–≤–∏–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä", False)
        ]
    }
  ]
questions += [
    {
        "text": "16) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ GPv10?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/16.jpg",
        "options": [
            ("–í–º–∏–∫–∞—á", True),
            ("–ö–ª–µ–º–∞", True),
            ("–°–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥", False),
            ("–ê–Ω—Ç–µ–Ω–∞", False)
        ]
    },
    {
        "text": "17) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É Relay?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/17.jpg",
        "options": [
            ("2", True),
            ("1", False),
            ("–û–±–∏–¥–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    },
    {
        "text": "18) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É StreetSiren?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/18.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    },
    {
        "text": "19) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ NVR?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/19.jpg",
        "options": [
            ("–ï–ö (–¥—Ä–æ—Å–µ–ª—ñ —ñ–∑ –∫—Ä–∏—Ö–∫–∏–º –∫–µ—Ä–∞–º—ñ—á–Ω–∏–º –∫–æ—Ä–ø—É—Å–æ–º)", True),
            ("SIM —Ö–æ–ª–¥–µ—Ä", False),
            ("–ö–ª–µ–º–∞ –∂–∏–≤–ª–µ–Ω–Ω—è", False),
            ("–ê–Ω—Ç–µ–Ω–∞", False)
        ]
    }
]
questions += [
    {
        "text": "20) –Ø–∫ –¥–ª—è MotionProtect Outdoor –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ñ–ø–ª—è—Ç–∏ —Ä–µ—à—Ç—É QR-–∫–æ–¥—É + CE –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–ª–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞–Ω–Ω—è?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/20.jpg",
        "options": [
            ("–í–∞—Ä—ñ–∞–Ω—Ç 1", True),
            ("–í–∞—Ä—ñ–∞–Ω—Ç 2", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    },
    {
        "text": "21) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É KeyPad?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/21.jpg",
        "options": [
            ("1", False),
            ("2", True),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False)
        ]
    },
    {
        "text": "22) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É DoubleButton?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/22.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("3", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False)
        ]
    },
    {
        "text": "23) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ PanicButton?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/23.jpg",
        "options": [
            ("–°–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥", True),
            ("–ö–Ω–æ–ø–∫–∞", False),
            ("–ê–Ω—Ç–µ–Ω–∞", False),
            ("–•–æ–ª–¥–µ—Ä –±–∞—Ç–∞—Ä–µ–π–∫–∏", False)
        ]
    }
]
questions += [
    {
        "text": "24) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É DualCurtain Outdoor?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/24.jpg",
        "options": [
            ("1", False),
            ("2", True),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False),
            ("QR –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω", False)
        ]
    },
    {
        "text": "25) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É Socket?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/25.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False)
        ]
    },
    {
        "text": "26) –Ø–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –Ω–∞ –ø–ª–∞—Ç—ñ WaterStop PWB?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/26.jpg",
        "options": [
            ("–•–æ–ª–¥–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –∫–ª–µ–º", True),
            ("–ö–Ω–æ–ø–∫–∞", False),
            ("–°–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥", False),
            ("–ê–Ω—Ç–µ–Ω–∞", False)
        ]
    },
    {
        "text": "27) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É WaterStop PWB?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/27.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("–û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    }
]
questions += [
    {
        "text": "28) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É MotionProtect?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/28.jpg",
        "options": [
            ("1", False),
            ("2", True),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    },
    {
        "text": "29) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É Hub 2?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/29.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("3", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    },
    {
        "text": "30) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É ocBridge Plus?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/30.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False)
        ]
    },
    {
        "text": "31) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É LightSwitch MBR?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/31.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–ë—É–¥—å-—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", False)
        ]
    },
    {
        "text": "32) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É LightSwitch MBR?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/32.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ", False)
        ]
    },
    {
        "text": "33) –í —è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–ª–µ—î–Ω–∏–π QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Ç—É HomeSiren?",
        "image": "https://raw.githubusercontent.com/80casper08/Hardtest2.0/main/images/33.jpg",
        "options": [
            ("1", True),
            ("2", False),
            ("QR –Ω–µ –∫–ª–µ—ó—Ç—å—Å—è", False),
            ("–û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ", False)
        ]
    }
]

@dp.message(F.text.startswith("/start"))
async def start_quiz(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(QuizState.question_index)
    await state.update_data(
        question_index=0,
        selected_options=[],
        temp_selected=set()
    )
    await send_question(message.chat.id, state)

async def send_question(chat_id, state: FSMContext):
    data = await state.get_data()
    index = data["question_index"]

    if index >= len(questions):
        selected_all = data.get("selected_options", [])
        correct = 0
        for i, q in enumerate(questions):
            correct_indices = {j for j, (_, ok) in enumerate(q["options"]) if ok}
            user_selected = set(selected_all[i])
            if correct_indices == user_selected:
                correct += 1
        await bot.send_message(chat_id,
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É: {correct} –∑ {len(questions)}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="details")],
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="retry")]
                ]
            )
        )
        return

    question = questions[index]
    options = list(enumerate(question["options"]))
    await state.update_data(current_options=options, temp_selected=set())

    buttons = []
    for i, (text, _) in options:
        prefix = "‚óªÔ∏è "
        buttons.append([InlineKeyboardButton(text=prefix + text, callback_data=f"opt_{i}")])
    buttons.append([InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # üßπ –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    previous_id = data.get("current_message_id")
    if previous_id:
        try:
            await bot.delete_message(chat_id, previous_id)
        except:
            pass

    msg = await bot.send_photo(chat_id, photo=question["image"], caption=question["text"], reply_markup=keyboard)
    await state.update_data(current_message_id=msg.message_id)

@dp.callback_query(F.data.startswith("opt_"))
async def toggle_option(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[1])
    data = await state.get_data()
    selected = data.get("temp_selected", set())

    if index in selected:
        selected.remove(index)
    else:
        selected.add(index)

    await state.update_data(temp_selected=selected)

    options = data["current_options"]
    buttons = []
    for i, (text, _) in options:
        prefix = "‚úÖ " if i in selected else "‚óªÔ∏è "
        buttons.append([InlineKeyboardButton(text=prefix + text, callback_data=f"opt_{i}")])
    buttons.append([InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=data["current_message_id"],
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "confirm")
async def confirm_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("temp_selected", set())
    selected_options = data.get("selected_options", [])

    final_indices = list(selected)

    selected_options.append(final_indices)
    new_index = data["question_index"] + 1
    await state.update_data(
        selected_options=selected_options,
        question_index=new_index,
        temp_selected=set()
    )
    await send_question(callback.message.chat.id, state)

@dp.callback_query(F.data == "details")
async def show_details(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_all = data.get("selected_options", [])
    text_blocks = []

    for i, q in enumerate(questions):
        correct_indices = {j for j, (_, ok) in enumerate(q["options"]) if ok}
        user_selected = set(selected_all[i])
        if correct_indices != user_selected:
            user_ans = [q["options"][j][0] for j in user_selected]
            correct_ans = [q["options"][j][0] for j in correct_indices]
            block = f"‚ùì *{q['text']}*\n" \
                    f"üî¥ –¢–∏ –≤–∏–±—Ä–∞–≤: {', '.join(user_ans) if user_ans else '–Ω—ñ—á–æ–≥–æ'}\n" \
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {', '.join(correct_ans)}"
            text_blocks.append(block)

    if not text_blocks:
        await bot.send_message(callback.message.chat.id, "ü•≥ –í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ!")
    else:
        for block in text_blocks:
            await bot.send_message(callback.message.chat.id, block, parse_mode="Markdown")

@dp.callback_query(F.data == "retry")
async def restart_quiz(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(QuizState.question_index)
    await state.update_data(
        question_index=0,
        selected_options=[],
        temp_selected=set()
    )
    await send_question(callback.message.chat.id, state)

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


